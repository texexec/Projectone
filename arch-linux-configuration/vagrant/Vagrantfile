Vagrant.configure("2") do |config|

  config.trigger.before :up, :provision do |trigger|
    trigger.run = {inline: "./download_iso.sh start"}
  end

  config.trigger.after :destroy do |trigger|
    trigger.run = {inline: "./download_iso.sh stop"}
  end

  config.vm.define :archlinux do |archlinux|
    archlinux.vm.hostname = "archlinux"
    archlinux.vm.provider :libvirt do |libvirt|
      libvirt.cpu_mode = 'host-passthrough'
      libvirt.memory = '8192'
      libvirt.cpus = '4'
      libvirt.graphics_type = 'spice'
      # Create a disk
      libvirt.storage :file,
        size: '50G',
        type: 'qcow2',
        bus: 'sata'
      # Set fr keyboard for vnc connection
      libvirt.keymap = 'fr'
      libvirt.boot 'cdrom'
      libvirt.storage :file, :device => :cdrom, :path => '/tmp/archlinux.iso', :bus => 'sata'
      # Set UEFI boot, comment for legacy
      ### On Arch Linux with OVMF package, use
      libvirt.loader = '/usr/share/edk2-ovmf/x64/OVMF_CODE.fd'
      libvirt.nvram = '/usr/share/edk2-ovmf/x64/OVMF_VARS_archlinux.fd'
      ### On Void Linux, use qemu edk2 firmwares
      # For secure boot, use "secure" firmware and force Q35 chipset
      #libvirt.machine_type = 'q35'
      #libvirt.loader = '/usr/share/qemu/edk2-x86_64-secure-code.fd'
      #libvirt.loader = '/usr/share/qemu/edk2-x86_64-code.fd'
      #libvirt.nvram = '/var/lib/libvirt/qemu/nvram/archlinux-vagrant.fd'
    end
  end
end
